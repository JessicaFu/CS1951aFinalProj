{% extends "base.html" %}

{% block body_content %}
<script src="http://d3js.org/topojson.v0.min.js"></script>
<style>
path {
  stroke: black;
  stroke-width: 0.5px;
  fill: #fff7bc;
}
#checkboxes {
  position: relative;
  top: 0px;
  left: 800px;
  border: 0.5px black solid;
  display:inline;
}

h1 {
   color: #444444;
   text-shadow: -1px -1px 1px #000, 1px 1px 1px #ccc;
}

.map {
  width: 900px;
  height: 960px;
  border-style: solid;
border-width: 40px 56px 40px 55px;
-moz-border-image: url(/static/scroll.png) 40 56 40 55 stretch;
-webkit-border-image: url(/static/scroll.png) 40 56 40 55 stretch;
-o-border-image: url(/static/scroll.png) 40 56 40 55 stretch;
border-image: url(/static/scroll.png) 40 56 40 55 fill stretch;
}

</style>
<style>

.axis path,
.axis line {
  fill: none;
  stroke: #000;
  shape-rendering: crispEdges;
}

.x.axis path {
  display: none;
}

.line {
  fill: none;
  stroke: steelblue;
  stroke-width: 1.5px;
}

#default {
    text-align:center;
    line-height:500px;
    font-size:20pt;
    font-weight:bold;
}

#graph {
    height:500px;
}

</style>

<div id="inputForm" class="">
<form id="searchForm" class="form-inline" style="margin:0 auto 10px auto; width:80%;display:block-inline;">
    <div class="form-group" style="width:100%">
  <label for="keyword" class="control-label">Keyword</label> 
  <input type="text"  class="form-control input-lg" id="keyword" value="Nepal" placeholder="Nepal" style="width:100%" />
</div>
<div class="form-inline" style="margin:10px auto 0 auto;width:50%">
    <div class="form-group" style="width:45%;margin-right:4%">
    <label for="start" class="control-label">Begin Date</label>
  <input type="text" class="form-control" id="start" placeholder="04/18/2015" value="04/18/2015" style=""/>
</div>
    <div class="form-group" style="width:45%;margin-left:4%;">
    <label for="end" class="control-label">End Date</label>
  <input type="text" class="form-control"  id="end" placeholder="05/10/2015" value="05/10/2015"/>
</div>
    <div style="width:30%;margin:20px auto 0 auto;">
  <button id="sub"type="submit" class="btn btn-primary btn-lg" style="width:100%;border:1px solid black;">Go</button>
</div>
</div>
</form>
</div>

<hr/>


<div id="graph">
    <div id="default">Please enter valid search terms and press Go!</div>
</div>

<div id="searchResults"></div>

<div id="heatmap">

  <h1>Global Distribution of News</h1>
  <div id='checkboxes'>
    <h3> News Sources </h3>
    <form action="">
        <input id='Huffington Post' type="checkbox" onclick="updateOpacity(this)" color='rgb(141,160,203)'>Huffington Post<br>
        <input id='Al Jazeera' type="checkbox" onclick="updateOpacity(this)">Al Jazeera<br>
        <input id='BBC' type="checkbox" onclick="updateOpacity(this)">BBC<br>
        <input id='The Chronicle' type="checkbox" onclick="updateOpacity(this)">The Chronicle<br>
        <input id='CNN' type="checkbox" onclick="updateOpacity(this)">CNN<br>
        <input id='Herald Sun' type="checkbox" onclick="updateOpacity(this)">Herald Sun<br>
        <input id='The Onion' type="checkbox" onclick="updateOpacity(this)">The Onion<br>
        <input id='The Washington Post' type="checkbox" onclick="updateOpacity(this)">The Washington Post<br>
    </form>
  </div>
</div>

<div id="about">
<iframe src="https://docs.google.com/document/d/1vvkXcyoNCOXZWNJuhF15YgV4yoPuCIGN5d81BbVCF1Q/pub?embedded=true"></iframe>

</div>


<script>

$("#searchForm").submit(function(event) {
    var start = $('#start').val().split("/")
    start = new Array(start[2], start[0], start[1]).join("");
    var end = $('#end').val().split("/")
    end = new Array(end[2], end[0], end[1]).join("");
  event.preventDefault();
  visual($('#keyword').val(),start , end);
});


function visual(keyword, start, end) {
	

	url = "http://52.5.82.206/timeline/" + keyword + "/" + start + "/" + end
	

	startVisual(url, parseInt(start), parseInt(end));
}

function showArticles(arts) {
    d3.select("#searchResults").html("");

        $("#searchResults").append("<table class=\"table-striped\"><tr><th>Rank</th><th>Source</th><th>Article</th></tr>");
        for (var i = 0; i < arts.length; i++) {
            $("#searchResults").append("<tr><td>" + (i+1) + "</td><td>" + arts[i]["source"] + "</td><td><a href=\"" + arts[i]["url"] +"\" target=\"_blank\">" + arts[i]["headline"] +"</a></td></tr>");
        }
        $("#searchResults").append("</table>");
}

function recommend(url) {
    //define path
    //get
    var path=""
    d3.select("#recommend").html("")

    d3.json(path, function(error, data) {
        if (error) {
            $("#recommend").html("Problem getting recommendations.");
            return console.warn(error);
        }

        var arts = data["articles"];

        $("#recommend").append("<table class=\"table-striped\"><tbody><tr><th>Rank</th><th>Source</th><th>Article</th></tr>")
        for (var i = 0; i < arts.length; i++) {
            $("#recommend").append("<tr><td>" + (i+1) + "</td><td>" + arts[i]["source"] + "</td><td><a href=\"" + arts[i]["url"] +"\" target=\"_blank\">" + arts[i]["headline"] +"</a></td></tr>");
        }
        $("#recommend").append("</tbody></table>")
    });
}

function startVisual(path, start, end){

      d3.select("#graph").select("svg").remove();

      var margin = {top: 100, right: 80, bottom: 30, left: 50},
          width = 800 - margin.left - margin.right,
          height = 500 - margin.top - margin.bottom;

      var parseDate = d3.time.format("%Y%m%d").parse;

      var x = d3.time.scale()
          .range([0, width]);

      var y = d3.scale.linear()
          .range([height, 0]);

      var color = d3.scale.category10();

      var xAxis = d3.svg.axis()
          .scale(x)
          .orient("bottom");

      var yAxis = d3.svg.axis()
          .scale(y)
          .orient("left");

      var line = d3.svg.line()
          .interpolate("linear")
          .x(function(d) { return x(d.date); })
          .y(function(d) { return y(d.count); });

      var svg = d3.select("#graph").append("svg")
          .attr("width", width + margin.left + margin.right)
          .attr("height", height + margin.top + margin.bottom)
        .append("g")
          .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

      d3.json(path, function(error, rData) {
        if(error) {
            $(".form-group").addClass("has-error");
            $("#default").css("display","inherit");
            $("#searchResults").html("");
            return console.warn(error);
        } else {
            $(".form-group").removeClass("has-error");
            $("#default").css("display","none");
            console.log($("#default").css("display"));
        }
        var means = rData["means"];
      	var data = rData["d3"];
        showArticles(rData["articles"]);
        console.log(means);
      	
        color.domain(d3.keys(data[0]).filter(function(key) { return key !== "date"; }));

        data.forEach(function(d) {
          d.date = parseDate(d.date);
        });

        var cities = color.domain().map(function(name) {
          return {
            name: name,
            values: data.map(function(d) {
              console.log("before temperature");
              console.log(name);
              console.log(d[name]);
              return {date: d.date, count: +d[name]};
            })
          };
        });

        x.domain(d3.extent(data, function(d) { return d.date; }));

        y.domain([
          d3.min(cities, function(c) { return d3.min(c.values, function(v) { return v.count; }); }),
          d3.max(cities, function(c) { return d3.max(c.values, function(v) { return v.count; }); })
        ]);

        svg.append("g")
            .attr("class", "x axis")
            .attr("transform", "translate(0," + height + ")")
            .call(xAxis);

        svg.append("g")
            .attr("class", "y axis")
            .call(yAxis)
          .append("text")
            .attr("transform", "rotate(-90)")
            .attr("y", 6)
            .attr("dy", ".71em")
            .style("text-anchor", "end")
            .text("Occurrances");

        var city = svg.selectAll(".city")
            .data(cities)
          .enter().append("g")
            .attr("class", "city");

        city.append("path")
            .attr("class", "line")
            .attr("d", function(d) { 
              console.log("d.values is next:");
              console.log(d.values);
              return line(d.values); })
            .style("stroke", function(d) { return color(d.name); });

        var tooltip = d3.select("#graph")
                        .append("div")
                        .style("position", "absolute")
                        .style("z-index", "10")
                        .style("visibility", "hidden")
                        .style("background-color", "#fff")
                        .style("border", "1px solid black")
                        .style("padding", "5px")
                        .text("simple");

        city.append("text")
            .datum(function(d) { return {name: d.name, value: d.values[d.values.length - 1]}; })
            .attr("transform", function(d, i) { return "translate(" + (x(d.value.date) - 55) + "," + (i * 20) + ")"; })
            .attr("x", 3)
            .attr("dy", ".35em")
            .attr("font-size", "10pt")
            .style("cursor", "default")
            .text(function(d) { return d.name; })
                .on("mouseover", function(d) {
                    var curMean = means[d.name][2];
                    return tooltip.text("Mean: " + curMean)
                            .style("visibility","visible")
                })
                .on("mousemove", function() {return tooltip.style("top", (event.pageY-10) + "px")
                                                            .style("left", (event.pageX+10) +"px");})
                .on("mouseout",function(){return tooltip.style("visibility", "hidden");})
            .style("stroke", function(d) { return color(d.name); });
      });

}

function updateOpacity(box) {
  console.log(box.id);
  var elts = document.getElementsByClassName(box.id);
  var newOpacity = 0.0; 
  if (box.checked) {
    newOpacity = 0.75;
  }
  for (var i=0; i<elts.length; i++) {
    elts[i].style.opacity = newOpacity;
    //elts[i].style.display = none;
  }
}

//function(d) {
       //        if (document.getElementById(d.source).checked == true) {
       //          return 0.85;
       //        } else {
       //          return 0.15;
       //        }
       // })

var width = 800,
    height = 500;
height = 960;

var colors = {
  'Huffington Post': 'rgb(141,160,203)',
  'Al Jazeera': 'rgb(27,158,119)', 
  'BBC': 'rgb(255,127,0)',
  'The Chronicle': 'rgb(247,129,191)', 
  'CNN': 'rgb(228,26,28)', 
  'Herald Sun': 'rgb(166,86,40)', 
  'The Onion': 'rgb(102,166,30)', 
  'The Washington Post': 'rgb(152,78,163)'
}

// var counts = {
//   'Huffington Post': 765,
//   'Al Jazeera': 1957, 
//   'BBC': 478, 
//   'The Chronicle': 1625, 
//   'CNN': 26, 
//   'Herald Sun': 729, 
//   'The Onion': 79, 
//   'The Washington Post': 765
// }

var counts = {
  'Huffington Post': 514,
  'Al Jazeera': 513, 
  'BBC': 316, 
  'The Chronicle': 332, 
  'CNN': 51, 
  'Herald Sun': 355, 
  'The Onion': 26, 
  'The Washington Post': 353
}

// var counts = {
//   'Huffington Post': 842,
//   'Al Jazeera': 1795, 
//   'BBC': 471, 
//   'The Chronicle': 1726, 
//   'CNN': 26, 
//   'Herald Sun': 760, 
//   'The Onion': 73, 
//   'The Washington Post': 417
// }

// var projection = d3.geo.interrupt(d3.geo.sinuMollweide.raw)
//     .lobes([[ // northern hemisphere
//       [[-180,  35], [ -30,  90], [   0,  35]],
//       [[   0,  35], [  30,  90], [ 180,  35]]
//     ], [ // southern hemisphere
//       [[-180, -10], [-102, -90], [ -65, -10]],
//       [[ -65, -10], [   5, -90], [  77, -10]],
//       [[  77, -10], [ 103, -90], [ 180, -10]]
//     ]])
//     .rotate([-20, -55])
//     .scale(165)
//     .translate([width / 2, height / 2 - 16])
//     .precision(.1);

// var width = 600,
//     height = 400,
//     rotate = 60,        // so that [-60, 0] becomes initial center of projection
//     maxlat = 83;        // clip northern and southern poles (infinite in mercator)
    
// var projection = d3.geo.mercator()
//     .rotate([rotate,0])
//     .scale(1)           // we'll scale up to match viewport shortly.
//     .translate([width/2, height/2]);

// // find the top left and bottom right of current projection
// function mercatorBounds(projection, maxlat) {
//     var yaw = projection.rotate()[0],
//         xymax = projection([-yaw+180-1e-6,-maxlat]),
//         xymin = projection([-yaw-180+1e-6, maxlat]);
    
//     return [xymin,xymax];
// }

// // set up the scale extent and initial scale for the projection
// var b = mercatorBounds(projection, maxlat),
//     s = width/(b[1][0]-b[0][0]),
//     scaleExtent = [s, 10*s];

// projection
//     .scale(scaleExtent[0]);

// var zoom = d3.behavior.zoom()
//     .scaleExtent(scaleExtent)
//     .scale(projection.scale())
//     .translate([0,0])               // not linked directly to projection
//     .on("zoom", redraw);
    
// var path = d3.geo.path()
//     .projection(projection);

// var svg = d3.selectAll('body')
//     .append('svg')
//         .attr('width',width)
//         .attr('height',height)
//         .call(zoom);

// d3.json("world-110m2.json", function ready(error, world) {

//     svg.selectAll('path')
//         .data(topojson.feature(world, world.objects.countries).features)
//       .enter().append('path')
    
//     redraw();       // update path data
// });

// // track last translation and scale event we processed
// var tlast = [0,0], 
//     slast = null;

// function redraw() {
//     if (d3.event) { 
//         var scale = d3.event.scale,
//             t = d3.event.translate;                
        
//         // if scaling changes, ignore translation (otherwise touch zooms are weird)
//         if (scale != slast) {
//             projection.scale(scale);
//         } else {
//             var dx = t[0]-tlast[0],
//                 dy = t[1]-tlast[1],
//                 yaw = projection.rotate()[0],
//                 tp = projection.translate();
        
//             // use x translation to rotate based on current scale
//             projection.rotate([yaw+360.*dx/width*scaleExtent[0]/scale, 0, 0]);
//             // use y translation to translate projection, clamped by min/max
//             var b = mercatorBounds(projection, maxlat);
//             if (b[0][1] + dy > 0) dy = -b[0][1];
//             else if (b[1][1] + dy < height) dy = height-b[1][1];
//             projection.translate([tp[0],tp[1]+dy]);
//         }
//         // save last values.  resetting zoom.translate() and scale() would
//         // seem equivalent but doesn't seem to work reliably?
//         slast = scale;
//         tlast = t;
//     }
    
//     svg.selectAll('path')       // re-project path data
//         .attr('d', path);
// }

//////////////////////////////

var projection = d3.geo.mercator()
    .scale((width + 1) / 2 / Math.PI)
    .translate([width / 2, height / 2])
    .precision(.1)
    .scale(325);

//var projection = d3.geo.mercator()
//    .center([100, 30 ])
//    .scale(200)
//    .rotate([-180,0]);

var svg = d3.select("#heatmap")
    .append("div")
    .attr("class", "map")
    .append("svg")
    .attr("width", width)
    .attr("height", height);

var path = d3.geo.path()
    .projection(projection);

var g = svg.append("g");

// load and display the World
d3.json("/static/world-110m2.json", function(error, topology) {

//load and display the cities
d3.csv("/static/map_data5.csv", function(error, data) {
    g.selectAll("circle")
       .data(data)
       .enter()
       .append("a")
				  // .attr("xlink:href", function(d) {
					 //  return "https://www.google.com/search?q="+d.name;}
				  // )
       .append("circle")
       .attr("cx", function(d) {
               return projection([d.lon, d.lat])[0];
       })
       .attr("cy", function(d) {
               return projection([d.lon, d.lat])[1];
       })
       .attr("r", function(d) {
              //return (Math.pow(d.count,2/3) / counts[d.source])*500 + 3;
              return Math.pow(d.count / counts[d.source], 1/2)*50 + 3;
               //return (200*d.count^0.8 + 50) / (counts[d.source])^5;
       })
       .attr('class', function(d) {
                return d.source;
       })
       .style("fill", function(d) {
               return colors[d.source];
       })
       .style("opacity", 0.0)
       .append('title')
       .text(function(d) {
              return d.name; //(Math.sqrt(d.count) / counts[d.source])*1000 + 5;
              //return (200*d.count^0.8 + 50) / (counts[d.source])^5;//d.name;
       });
});
// d3.csv("cities_big.csv", function(error, data) {
//     g.selectAll("circle")
//        .data(data)
//        .enter()
//        .append("a")
//           .attr("xlink:href", function(d) {
//             return "https://www.google.com/search?q="+d.city;}
//           )
//        .append("circle")
//        .attr("cx", function(d) {
//                return projection([d.lon, d.lat])[0];
//        })
//        .attr("cy", function(d) {
//                return projection([d.lon, d.lat])[1];
//        })
//        .attr("r", 5)
//        .style("fill", 'green')
//        .style("opacity", 0.5);
// });

g.selectAll("path")
      .data(topojson.object(topology, topology.objects.countries)
          .geometries)
    .enter()
      .append("path")
      .attr("d", path)
});

// zoom and pan
var zoom = d3.behavior.zoom()
    .on("zoom",function() {
        g.attr("transform","translate("+ 
            d3.event.translate.join(",")+")scale("+d3.event.scale+")");
        g.selectAll("circle")
            .attr("d", path.projection(projection));
        g.selectAll("path")  
            .attr("d", path.projection(projection)); 

  });

svg.call(zoom)
</script>
{% endblock body_content %}
